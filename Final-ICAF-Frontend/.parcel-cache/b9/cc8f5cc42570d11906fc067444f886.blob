var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "ACTION_TYPES", function () {
  return ACTION_TYPES;
});
_parcelHelpers.export(exports, "fetchAllConferenceList", function () {
  return fetchAllConferenceList;
});
_parcelHelpers.export(exports, "fetchAllApprovedConferenceList", function () {
  return fetchAllApprovedConferenceList;
});
_parcelHelpers.export(exports, "fetchAllUnpprovedConferenceList", function () {
  return fetchAllUnpprovedConferenceList;
});
_parcelHelpers.export(exports, "addConferenceDetails", function () {
  return addConferenceDetails;
});
_parcelHelpers.export(exports, "updateConference", function () {
  return updateConference;
});
_parcelHelpers.export(exports, "approveConferenceDetailsByAdmin", function () {
  return approveConferenceDetailsByAdmin;
});
var _apisConferenceAPI = require("../apis/ConferenceAPI");
var _apisConferenceAPIDefault = _parcelHelpers.interopDefault(_apisConferenceAPI);
const ACTION_TYPES = {
  FETCH_ALL_CONFERENCE_LIST: "FETCH_ALL_CONFERENCE_LIST",
  APPROVED_CONFERENCE_LIST: "APPROVED_CONFERENCE_LIST",
  UNAPPROVED_CONFERENCE_LIST: "UNAPPROVED_CONFERENCE_LIST",
  ADD_CONFERENCE: "ADD_CONFERENCE",
  UPDATE_CONFERENCE: "UPDATE_CONFERENCE",
  APPROVE_CONFERENCE_ADMIN: "APPROVE_CONFERENCE_ADMIN"
};
const fetchAllConferenceList = () => dispatch => {
  _apisConferenceAPIDefault.default.conference().getAllConferenceDetails().then(response => {
    dispatch({
      type: ACTION_TYPES.FETCH_ALL_CONFERENCE_LIST,
      payload: response.data
    });
  });
};
const fetchAllApprovedConferenceList = () => dispatch => {
  _apisConferenceAPIDefault.default.conference().getApprovedConferenceDetails().then(response => {
    dispatch({
      type: ACTION_TYPES.APPROVED_CONFERENCE_LIST,
      payload: response.data
    });
  });
};
const fetchAllUnpprovedConferenceList = () => dispatch => {
  _apisConferenceAPIDefault.default.conference().getUnapprovedConferenceDetails().then(response => {
    dispatch({
      type: ACTION_TYPES.UNAPPROVED_CONFERENCE_LIST,
      payload: response.data
    });
  });
};
const addConferenceDetails = (data, OnSuccess, OnFailure) => dispatch => {
  _apisConferenceAPIDefault.default.conference().addConferenceDetails(data).then(response => {
    dispatch({
      type: ACTION_TYPES.ADD_CONFERENCE,
      payload: response.data
    });
    OnSuccess();
  }).catch(() => {
    OnFailure();
  });
};
const updateConference = (id, data, OnSuccess, OnFailure) => dispatch => {
  _apisConferenceAPIDefault.default.conference().updateConferenceDetailsByEditor(id, data).then(() => {
    dispatch({
      type: ACTION_TYPES.UPDATE_CONFERENCE,
      payload: {
        ...data
      }
    });
    OnSuccess();
  }).catch(() => {
    OnFailure();
  });
};
const approveConferenceDetailsByAdmin = (id, data, OnSuccess, OnFailure) => dispatch => {
  console.log(id, data);
  _apisConferenceAPIDefault.default.conference().approveConferenceDetailsByAdmin(id, data).then(response => {
    dispatch({
      type: ACTION_TYPES.APPROVE_CONFERENCE_ADMIN,
      payload: {
        ...response.data
      }
    });
    OnSuccess();
  }).catch(() => {
    OnFailure();
  });
};
